{"version":3,"sources":["utils/fetch.js","components/CurrencyFlag.jsx","components/CurrencySelector/CurrencySelector.jsx","components/SearchBar/SearchBar.jsx","components/Currency/Currency.jsx","components/RateList/RateList.jsx","components/App/App.js","serviceWorker.js","index.js"],"names":["request","_url","method","body","url","headers","Headers","append","params","includes","JSON","stringify","Request","fetch","then","response","status","get","json","getData","CurrencyFlag","currency","className","toLowerCase","currencies","CurrencySelector","onChangeCurrency","value","onChange","e","target","map","item","index","key","SearchBar","amount","onChangeAmount","type","defaultValue","placeholder","CSymbol","toUpperCase","Currency","reverse","display","Amount","rate","_rate","Number","toFixed","RateList","rates","Object","keys","App","useState","state","setState","useEffect","currentState","getRates","data-testid","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.227f0c27.chunk.js","sourcesContent":["const baseUrl = \"//api.frankfurter.app\";\n\nconst request = (_url, method = \"GET\", body = \"\") => {\n  const url = `${baseUrl}${_url}`;\n  const headers = new Headers();\n  headers.append(\"Content-Type\", \"application/json\");\n  const params = {\n    method,\n    headers: headers,\n  };\n  if ([\"POST\", \"PUT\"].includes(method)) {\n    params.body = typeof body !== \"string\" ? JSON.stringify(body) : body;\n  }\n  const request = new Request(url, params);\n\n  return fetch(request).then((response) => {\n    const { status, headers } = response;\n    if (status === 204 || headers.get(\"Content-Length\") === 0) {\n      return {};\n    }\n    return response.json();\n  });\n};\n\nexport const getData = (url) => request(url, \"GET\");\nexport const postData = (url, data) => request(url, \"POST\", data);\nexport const putData = (url, data) => request(url, \"PUT\", data);\nexport const deleteData = (url) => request(url, \"DELETE\");\n\nexport default {\n  get: getData,\n  post: postData,\n  put: putData,\n  delete: deleteData,\n};\n","import * as React from \"react\";\n\nexport const CurrencyFlag = ({ currency }) => (\n  <span\n    className={`currency-flag currency-flag-${currency.toLowerCase()}`}\n  ></span>\n);\n","import * as React from \"react\";\nimport \"./CurrencySelector.css\";\nimport { CurrencyFlag } from \"../CurrencyFlag\";\n\nconst currencies = [\"EUR\", \"USD\", \"GBP\"];\n\nexport const CurrencySelector = ({ currency = \"usd\", onChangeCurrency }) => (\n  <div className=\"currency-box\">\n    <select\n      className=\"currency-select\"\n      value={currency}\n      onChange={(e) => onChangeCurrency(e.target.value)}\n    >\n      {currencies.map((item, index) => (\n        <option key={index} >{item}</option>\n      ))}\n    </select>\n    <CurrencyFlag key={`flag-${currency}`} currency={currency} />\n  </div>\n);\n","import * as React from \"react\";\nimport { CurrencySelector } from \"../CurrencySelector/CurrencySelector\";\nimport \"./SearchBar.css\";\n\nexport const SearchBar = ({\n  currency = \"usd\",\n  amount = 1,\n  onChangeAmount = () => {},\n  onChangeCurrency = () => {},\n}) => (\n  <div className=\"search-bar-container\">\n    <div className=\"search-bar\">\n      <input\n        type=\"text\"\n        defaultValue={amount}\n        onChange={(e) => onChangeAmount(e.target.value)}\n        placeholder=\"Amount\"\n      />\n      <CurrencySelector\n        currency={currency}\n        onChangeCurrency={onChangeCurrency}\n      />\n    </div>\n  </div>\n);\n","import * as React from \"react\";\nimport { CurrencyFlag } from \"../CurrencyFlag\";\nimport \"./Currency.css\";\n\nconst CSymbol = ({ currency }) => (\n  <span className=\"currency\">{currency.toUpperCase()}</span>\n);\n\nconst display = (currency, reverse) => [\n  <CurrencyFlag key={`flag-${currency}`} currency={currency} />,\n  <CSymbol key={`symbol-${currency}`} currency={currency} />,\n];\n\nexport const Currency = ({ currency = \"usd\" }) => (\n  <div className=\"currency-box\">{display(currency)}</div>\n);\n","import * as React from \"react\";\nimport { Currency } from \"../Currency/Currency\";\nimport \"./RateList.css\";\n\nconst Amount = ({ amount, rate }) => {\n  const _rate = Number(rate);\n  return (\n    <span className=\"rate\">{(amount ? _rate * amount : _rate).toFixed(5)}</span>\n  );\n};\n\nexport const RateList = ({ rates = {}, amount, className = \"\" }) => (\n  <div className={`rate-list-container ${className}`}>\n    <div className=\"rate-list\">\n      <ul>\n        {Object.keys(rates).map((currency, index) => (\n          <li key={index}>\n            <Currency currency={currency} />\n            <Amount rate={rates[currency]} amount={amount} />\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { getData } from \"../../utils/fetch\";\nimport { SearchBar } from \"../SearchBar/SearchBar\";\nimport { RateList } from \"../RateList/RateList\";\n\nfunction App() {\n  const [state, setState] = useState({\n    amount: 1,\n    currency: \"USD\",\n    rates: {},\n  });\n\n  const { amount, currency, rates } = state;\n\n  const getRates = (currency) =>\n    getData(`/latest?from=${currency}`).then(({ rates }) =>\n      setState((currentState) => ({\n        ...currentState,\n        rates,\n      }))\n    );\n\n  useEffect(() => {\n    getRates(currency);\n  }, [currency]);\n\n  const updateAmount = (amount) =>\n    setState((currentState) => ({\n      ...currentState,\n      amount: Number(amount),\n    }));\n\n  const updateCurrency = (currency) =>\n    setState((currentState) => ({\n      ...currentState,\n      currency,\n    }));\n\n  return (\n    <div className=\"app\" data-testid=\"app-container\">\n      <main className=\"contents\">\n        <SearchBar\n          amount={amount}\n          currency={currency}\n          onChangeAmount={updateAmount}\n          onChangeCurrency={updateCurrency}\n        />\n        <RateList className=\"rates\" rates={rates} amount={amount} />\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"currency-flags/dist/currency-flags.min.css\";\nimport \"./index.css\";\n\nimport App from \"./components/App/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}